
//  Guess the number game. 
package main

import (
	"fmt"
	"math/rand"
	"time"
)

// initializing the interface and struct game
var iplay IPlayer
var game Game

// interface
// one function prototype, Guess(), which takes no parameters and returns an integer
type IPlayer interface {
	Guess() int
}

// structs
/*This struct handles the player chances count, the random generated by the computer and the recent most guess made.
It also has an IPlayer type variable which takes the user response - y/n and activates the resptive guess method
*/
type Game struct {
	player        IPlayer
	recent_guess  int
	guesses_count int
	random_num    int
}

// Struct handles the variables for the computer version of the guess method
type Autoguess struct {
	min, max     int
	game_pointer *Game
}

// Struct handles the human version of the guess method
type Human struct {
}

// methods
/* This plays the game by calling the playerâ€™s guess() to get the next guess and
outputting the appropriate response by comparing the recent entered number vs radnom computer generated number.
*/
func (g *Game) play() {

	for g.guesses_count < 3 {

		g.recent_guess = iplay.Guess()
		g.guesses_count = g.guesses_count + 1
		if g.random_num == g.recent_guess {
			fmt.Println("You win!")
			break
		} else if g.guesses_count == 3 {
			fmt.Print("You ran out of guesses. Game over!")
		} else if g.recent_guess < g.random_num {
			fmt.Println("Too low")
		} else if g.recent_guess > g.random_num {
			fmt.Println("Too High")
		}
	}
}

// This asks the user for the next number to guess
func (h *Human) Guess() (num int) {

	var human_guess_num int
	fmt.Print("Enter your next guess: ")
	fmt.Scanf("%d", &human_guess_num)
	return human_guess_num
}

// This will return an appropriate guess based on choosing the middle value of the possible remaining values
func (a *Autoguess) Guess() (num int) {

	if a.game_pointer.recent_guess != -1 {
		if a.game_pointer.recent_guess < a.game_pointer.random_num {
			a.min = a.game_pointer.recent_guess
		} else if a.game_pointer.recent_guess > a.game_pointer.random_num {
			a.max = a.game_pointer.recent_guess
		}
	}

	auto_guess_num := (a.min + a.max) / 2
	fmt.Print("The computer has chosen: ")
	fmt.Println(auto_guess_num)
	return auto_guess_num

}

func main() {

	// declare variables
	var response string
	var guess_num int
	var min, max int = 1, 10

	//set time seed and generate random number
	rand.Seed(time.Now().UnixNano())
	guess_num = rand.Intn(max-min+1) + min

	//Get user response - how does the user wants to play the game and assign the respective struct to iplayer interface variable

	fmt.Println("Guess a number to demo interfaces!\n")
	fmt.Println("You have 3 guesses to guess a number from 1 to 10.")
	fmt.Print("Do you want to make the guesses? (y/n -- if n guesses will be generated for you): ")
	fmt.Scanf("%s", &response)

	if response == "y" {
		human := Human{}
		iplay = &human
	} else if response == "n" {
		autoguess := Autoguess{min: min, max: max, game_pointer: &game}
		iplay = &autoguess
	}
	//call the game method
	game = Game{player: iplay, guesses_count: 0, random_num: guess_num}
	game.play()
}
